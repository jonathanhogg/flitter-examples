-- Genuary day 1: Particles, lots of them
--
-- This is a rough fireworks simulation. The fireworks cast a cone of light on
-- the ground, which is completely unrealistic but looks nice. The sparkle
-- particles have diffuse as well as emissive colour, which means they fall as
-- dust/ash as they burn out. If you watch carefully you'll notice that the
-- fire trail of a new rocket going up sometimes illuminates this ash. The
-- rockets shoot a negative spotlight behind them that creates a little dark
-- "smoke" patch where they launch from - this helps to create a sense of them
-- actually coming out of the ground, otherwise they feel a bit disconnected.
-- It also creates a more interesting flash effect when they burst through the
-- ground plane. The fog is included mainly as a cheap way to colour the sky
-- and soften the boundary between the ground and the sky.
--
-- Copyright 2024 by Jonathan Hogg and licensed under CC BY-NC-SA 4.0
--
-- Record a video with:
-- flitter day1.fl --lockstep --fps=30 --runtime=60 --define RECORD=720

%pragma tempo 60

import bloom_filter from '../common/filters.fl'

let SIZE=(RECORD or 1080)*(1;1)
    average_interval=1
    fuse_time=2
    sparkle_time=5
    decay_time=2
    max_age=fuse_time+sparkle_time+decay_time
    sparkles=5000/max_age*average_interval
    total_fireworks=1000
    launch_speed=5000
    boom=0.1
    now=$(:firework;:clock)

let launch_times=accumulate(average_interval*2*beta(:interval)[..total_fireworks])
    active=(i if now > t and (now-t) < max_age) for i;t in zip(..total_fireworks, launch_times)

!physics state=:firework dimensions=3 resolution=1/30
    for i in active
        let age=now-launch_times[i] speed=launch_speed*(0.75+0.5*beta(:speed)[i])
        !particle id=i radius=15 mass=10 position=(uniform(:pos;i)[..2]-0.5)*1k;25 velocity=(beta(:vel;i)[..2]-0.5;1)*speed
        if age > fuse_time
            if $(:firework;:sparkle;i;0)
                -- This is an optimisation step to skip calculating the starting
                -- position and velocity of each sparkle once they exist.
                -- Normally I wouldn't bother, but there are so many of these
                -- that it saves a few milliseconds per frame.
                -- (There should, perhaps, be a better way to do this...)
                for j in ..sparkles
                    !particle radius=2 mass=0.2 id=:sparkle;i;j
            else
                let lon=uniform(:lon;i)[..sparkles] lat=beta(:lat;i)[..sparkles]-0.5 sparkle_speed=boom*speed*(1+0.1*normal(:speed;i)[..sparkles])
                    start_position=$(:firework;i) start_velocity=$(:firework;i;:velocity)
                for j in ..sparkles
                    let r;z=sparkle_speed[j]*polar(lat[j]) x;y=r*polar(lon[j])
                    !particle radius=2 mass=0.2 id=:sparkle;i;j position=start_position velocity=(x;y;z)+start_velocity
    !constant acceleration=0;0;-50
    !drag strength=100u
    !barrier position=0;0;0 normal=0;0;1 restitution=0

!window size=SIZE colorbits=16
    !record filename=('day1.mp4' if RECORD) codec=:hevc crf=25
        @bloom_filter radius=SIZE[0]/72
            !canvas3d samples=4 viewpoint=0;-2k;200 focus=0;0;750 up=0;0;1 far=5k fov=60/360 \
                      fog_color=hsv(0.6;0.9;0.01) fog_min=2k fog_max=5k
                !cylinder size=3k;3k;0.01 color=0.1
                for i in active
                    let age=now-launch_times[i] pos=$(:firework;i)
                    if age < fuse_time and pos
                        let vel=$(:firework;i;:velocity) speed=hypot(vel) dir=-vel/speed c=hsl(0.03;1;0.75-age/4)
                        !transform translate=pos shininess=100
                            !material color=1
                                !cone end=0 start=25*dir radius=5
                                !cylinder start=25*dir end=50*dir radius=5
                            !sphere position=50*dir size=5 emissive=c*10
                            !cone start=50*dir end=(50+speed/10)*dir radius=2.5 emissive=c*10
                            !cone start=50*dir end=(50+speed/2)*dir radius=5 emissive=c transparency=0.5
                            !light position=50*dir color=c*100k
                            !light position=50*dir direction=dir outer=20/360 color=-c*75k
                    if $(:firework;:sparkle;i;0)
                        let hue=uniform(:hue)[i] brightness=impulse(linear((age-fuse_time)/sparkle_time), 0.02)
                            hues=hue+normal(:spread;i)[..sparkles]/20 size=map(quad((age-fuse_time-sparkle_time)/decay_time), 2, 0)
                            prefix=:firework;:sparkle;i centre=sum($(prefix;j) for j in ..sparkles, 3)/sparkles
                        !light position=centre color=hsl(hue;1;brightness)*100k
                        !light position=centre color=hsv(hue;1;brightness)*500k direction=0;0;-1 inner=30/360 outer=80/360
                        !material color=1
                            for j in ..sparkles
                                !sphere size=size position=$(prefix;j) emissive=hsv(hues[j];1;brightness)*10
