-- Genuary day 29: Signed Distance Functions
--
-- (Also Genuary day 12: Lava lamp; and Genuary day 30: Shaders)
--
-- This sketch makes use of Flitter's support for custom shaders in 3D scenes.
--
-- A simple physics system simulates a bunch of blobs with random radii,
-- starting positions and starting temperatures. Blobs hotter than 1500Â°K rise
-- and cooler blobs sink. Blobs gain or lose heat depending on whether they are
-- nearer to the bottom or top of the sphere. The blobs have an adhesion force
-- that make them tend to loosely clump together, some slight  Brownian motion
-- randomness, buoyancy and drag complete the simulation. The buoyancy is
-- controller by keeping the mass of the particles the same and varyng the
-- radius according to the temperature so that they change density.
--
-- A group is constructed containing a single sphere that is rendered with a
-- custom shader. The custom shader takes the positions, radii and colours of
-- the blobs as input and does raymarching through each fragment with an SDF
-- consisting of a smooth union of all of the blobs. The calculated position,
-- normal and colour of each fragment are passed through the standard PBR
-- lighting code.
--
-- I hope you have a good GPU.
--
-- Copyright 2024 by Jonathan Hogg and licensed under CC BY-NC-SA 4.0
--
-- Record a video with:
-- flitter day29.fl --lockstep --runtime=180 --define 'RECORD=1080'

import bloom_filter from '../common/filters.fl'

let SIZE=RECORD*(1;1) or (1080;1080)
    FOV=60/360 if RECORD[1]>RECORD[0] else 70/360
    NBLOBS=100
    TAU=6.283185307179586
    NEUTRAL_DENSITY=1m
    NEUTRAL_TEMPERATURE=1500
    THERMAL_CONDUCTIVITY=0.2m
    LAMP_TEMPERATURE=3000
    THERMAL_GRADIENT=-2000
    THERMAL_CURVE=2

let t=$(:blob;:clock)
    blob_start_temp=NEUTRAL_TEMPERATURE+250*normal(:radius)[..NBLOBS]
    blob_mass=0.1+uniform(:mass)[..NBLOBS]**2*1.4
    blob_height=$(:blob;i)[1] for i in ..NBLOBS
    lamp_radiant_temperature=LAMP_TEMPERATURE+(1-((50-blob_height)/100)**THERMAL_CURVE)*THERMAL_GRADIENT
    blob_temperature=blob_start_temp+counter(:temperature, t)
    blob_volume=blob_mass/NEUTRAL_DENSITY*blob_temperature/NEUTRAL_TEMPERATURE
    blob_radius=(blob_volume/(2/3*TAU))**(1/3)
    blob_area=2*TAU*blob_radius**2
    temp=map(0.9, blob_temperature, NEUTRAL_TEMPERATURE)
    rate_of_temperature_change=THERMAL_CONDUCTIVITY*(lamp_radiant_temperature-temp)/blob_mass*blob_area
    temperature_update=counter(:temperature, t, rate_of_temperature_change)

func blob_color(i)
    colortemp(blob_temperature[i])*250

!physics dimensions=3 state=:blob resolution=1/30
    !adhesion strength=0.5
    !buoyancy gravity=0;-10;0 density=NEUTRAL_DENSITY
    !random strength=1
    !drag strength=10m
    !anchor id=:middle
    for i in ..NBLOBS
        !particle id=i radius=blob_radius[i] mass=blob_mass[i] position=normal(:pos;i)[..3]*10
        !distance from=:middle to=i max=50 strength=10

!window size=SIZE
    @bloom_filter id=:top radius=SIZE[0]/54
        !canvas3d camera_id=:cam far=200 fov=FOV fog_curve=2 fog_color=colortemp(NEUTRAL_TEMPERATURE) fog_max=200 max_lights=NBLOBS+1
            !transform rotate_y=t/60
                !camera id=:cam viewpoint=0;0;100
            !light color=colortemp(LAMP_TEMPERATURE)*100k direction=0;1;0 position=0;-100;0
            for i in ..NBLOBS
                !light position=$(:blob;i) color=blob_color(i)*blob_area[i]/20
            !material roughness=0.35 metal=true color=0.5
                !group fragment=read('../glsl/sdf_shader.frag') \
                       NSPHERES=NBLOBS smoothing=6 max_iterations=100 normal_delta=0.1 epsilon=0.01 far=200 \
                       sphere_positions=($(:blob;i) for i in ..NBLOBS) \
                       sphere_colors=(blob_color(i) for i in ..NBLOBS) \
                       sphere_radii=blob_radius
                    !sphere size=70
    !record filename=('day29.mp4' if RECORD and t > 60) codec=:hevc crf=25 hidden=true
        !reference id=:top
