-- Genuary day 29: Signed Distance Functions
--
-- (Also Genuary day 12: Lava lamp; and Genuary day 30: Shaders)
--
-- This sketch makes use of Flitter's support for custom shaders in 3D scenes.
--
-- A simple physics system simulates a bunch of blobs with random radii,
-- starting positions and starting temperatures. Blobs hotter than 1500Â°K rise
-- and cooler blobs sink. Blobs gain or lose heat depending on whether they are
-- nearer to the bottom or top of the sphere. The blobs have an adhesion force
-- that make them tend to loosely clump together, some slight Brownian motion
-- randomness, buoyancy and drag complete the simulation. The buoyancy is
-- controller by keeping the mass of the particles the same and varying the
-- radius according to the temperature so that they change density.
--
-- A group is constructed containing oversized spheres around each of the blobs
-- and this is rendered with a custom SDF shader. The shader takes the
-- positions, radii and colours of the blobs as input and raymarches through
-- the shaded fragment in the opposite direction to the camera. If the
-- raymarcher gets a hit with the SDF then it returns the calculated colour at
-- that point using the same PBR algorithm as the normal Flitter one.
--
-- The end result is that the interior SDF scene is "painted" onto the surface
-- of the containing spheres. Rendering only the containing spheres allows us
-- to skip running the raymarching algorithm for empty areas of the window,
-- while the usual Flitter depth-ordered rendering allows us to keep the amount
-- of over-rendered pixels reasonably low.
--
-- I hope you have a good GPU.
--
-- Copyright 2024 by Jonathan Hogg and licensed under CC BY-NC-SA 4.0
--
-- Record a video with:
-- flitter day29.fl --lockstep --runtime=180 --define 'RECORD=1080'

%pragma tempo 60

import bloom_filter from '../common/filters.fl'

let SIZE=RECORD or 1080
    NBLOBS=100
    NEUTRAL_DENSITY=1m
    NEUTRAL_TEMPERATURE=1500
    THERMAL_CONDUCTIVITY=0.3m
    LAMP_TEMPERATURE=3000
    THERMAL_GRADIENT=-2000
    THERMAL_CURVE=2
    SMOOTHING=10
    R=80

let t=$(:blob;:clock) or 0
    blob_start_temp=NEUTRAL_TEMPERATURE+100*normal(:radius)[..NBLOBS]
    blob_mass=0.05+uniform(:mass)[..NBLOBS]**3*0.95
    blob_height=$(:blob;i)[1] for i in ..NBLOBS
    lamp_radiant_temperature=LAMP_TEMPERATURE+(1-((R-blob_height)/(R*2))**THERMAL_CURVE)*THERMAL_GRADIENT
    blob_temperature=$(:temperature) or blob_start_temp
    blob_volume=blob_mass/NEUTRAL_DENSITY*blob_temperature/NEUTRAL_TEMPERATURE
    blob_radius=blob_volume**(1/3)
    blob_area=blob_radius**2
    temp=map(0.9, blob_temperature, NEUTRAL_TEMPERATURE)
    rate_of_temperature_change=THERMAL_CONDUCTIVITY*(lamp_radiant_temperature-temp)/blob_mass*blob_area

func blob_color(i)
    colortemp(blob_temperature[i])*500

!counter state=:temperature initial=blob_start_temp time=t rate=rate_of_temperature_change minimum=1 maximum=LAMP_TEMPERATURE

!physics dimensions=3 state=:blob resolution=1/30
    !adhesion strength=2 overlap=0.15
    !buoyancy gravity=0;-100;0 density=NEUTRAL_DENSITY
    !random strength=0.5
    !drag strength=2m
    !anchor id=:middle
    for i in ..NBLOBS
        !particle id=i radius=blob_radius[i] mass=blob_mass[i] position=normal(:pos;i)[..3]*R/5
        !distance from=:middle to=i max=R strength=10

!window size=SIZE
    !canvas3d id=:depth_buffer hidden=true camera_id=:cam far=R*3 fov=0.2 fov_ref=:vertical fragment=read('../glsl/depth_shader.frag')
        !transform rotate_y=beat/30
            !camera id=:cam viewpoint=0;0;R*2
        for i in ..NBLOBS
            !sphere position=$(:blob;i) size=blob_radius[i]+SMOOTHING
    @bloom_filter id=:top blursize=SIZE/2 radius=SIZE[0]/108
        !canvas3d camera_id=:cam far=R*3 fov=0.2 fov_ref=:vertical fog_curve=2 fog_color=colortemp(NEUTRAL_TEMPERATURE) fog_min=50 fog_max=R*3 max_lights=NBLOBS+1
            !transform rotate_y=beat/30
                !camera id=:cam viewpoint=0;0;R*2
            !light color=colortemp(LAMP_TEMPERATURE)*100*R**2 direction=0;1;0 position=0;-R*2;0 outer=30/360
            !material roughness=0.35 metal=true color=0.5
                !group fragment=read('../glsl/sdf_sphere_shader.frag') \
                       vertex=read('../glsl/sdf_sphere_shader.vert') \
                       NSPHERES=NBLOBS smoothing=SMOOTHING max_iterations=20 normal_delta=0.1 epsilon=0.05 far=R*3 \
                       sphere_positions=($(:blob;i) for i in ..NBLOBS) \
                       sphere_colors=(blob_color(i) for i in ..NBLOBS) \
                       sphere_radii=blob_radius \
                       depth_buffer=:depth_buffer
                    for i in ..NBLOBS
                        !transform translate=$(:blob;i)
                            !sphere size=blob_radius[i]+SMOOTHING
                            !light position=0 color=blob_color(i)*blob_area[i]
    !record filename=('day29.mp4' if RECORD and t > 60) codec=:hevc crf=25 hidden=true
        !reference id=:top
