-- Genuary day 19: Flocking
--
-- This is a pretty basic flocking algorithm. Electrostatic charge (with a max
-- distance) is used to create local separation, and then a per-particle force
-- is applied for cohesion (force towards centre of mass) and alignment (force
-- in direction of average heading). The alignment is scaled with distance so
-- that particles further away from the centre wander around a bit more. A
-- random (brownian) force is applied to create some variation. Each particle
-- is constrained to remain within a sphere so that they don't wander too far
-- off screen.
--
-- The direction and length of the cone follows the velocity of each particle
-- and the colour temperature scales with the speed. The first 100 particles
-- (which is as random as any other selection) are also lights to create some
-- reflections on the surrounding particles.
--
-- Copyright 2024 by Jonathan Hogg and licensed under CC BY-NC-SA 4.0
--
-- Record a video with:
-- flitter day19.fl --lockstep --runtime=120 --fps=30 --define 'RECORD=1080'

%pragma tempo 60

import bloom_filter from '../common/filters.fl'

let SIZE=RECORD*(1;1) or (1920;1080)
    N=1500 if RECORD else 1000
    LIGHTS=100 if RECORD else 100

let centre_of_mass=sum($(:boid;i) for i in ..N, 3)/N
    heading=normalize(sum($(:boid;i;:velocity) for i in ..N, 3))

!physics state=:boid dimensions=3
    !drag strength=2m
    !electrostatic strength=50 max_distance=10
    !anchor id=:middle position=0
    let T=beat/5
        R=20*(..N)/N
        vx=noise(:vx, R, T)
        vy=noise(:vy, R, T)
        vz=noise(:vz, R, T)
    for i in ..N
        let clump=(centre_of_mass-$(:boid;i))/100
            distance=hypot(clump)
            variation=(vx[i];vy[i];vz[i])*5
        !particle id=i position=(beta(:pos;i)[..3]-0.5)*400 force=variation+clump+heading/distance
        !distance from=:middle to=i max=250

!window size=SIZE
    @bloom_filter id=:top radius=min(SIZE)//120 exposure=-1
        !canvas3d samples=4 near=0.1 far=600 fog_max=600 max_lights=LIGHTS fov_ref=:narrow \
                  camera_id=(:outside;:outside;:mass_forward;:mass_back;:outside_wide;:boidseye)[beat//10%6]
            !camera id=:outside position=0;0;300 fov=90/360 focus=centre_of_mass/2
            !camera id=:outside_wide position=0;0;260 fov=120/360 focus=centre_of_mass
            !camera id=:mass_forward fov=90/360 position=centre_of_mass focus=centre_of_mass+heading
            !camera id=:mass_back fov=60/360 position=centre_of_mass focus=centre_of_mass-heading
            let camera_boid=uniform(:boid)[beat//60]*N//1
            !transform translate=$(:boid;camera_boid)
                !camera id=:boidseye position=0 fov=90/360 focus=$(:boid;camera_boid;:velocity) up=-centre_of_mass
            for i in ..N
                let velocity=$(:boid;i;:velocity)
                    color=colortemp(hypot(velocity)*50)
                !transform translate=$(:boid;i)
                    !material color=0.5 metal=true roughness=0.3 emissive=color*250
                        !sphere
                        !cone start=0 end=velocity/5
                    if i < LIGHTS
                        !light position=0 color=color*(20M/LIGHTS)
    !record filename=('day19.mp4' if RECORD and beat > 60) codec=:hevc crf=25 hidden=true
        !reference id=:top
