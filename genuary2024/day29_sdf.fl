-- Genuary day 29: Signed Distance Functions
--
-- (Also Genuary day 12: Lava lamp; and Genuary day 30: Shaders)
--
-- This sketch makes use of Flitter's support for custom shaders in 3D scenes.
--
-- A simple physics system simulates a bunch of blobs with random radii,
-- starting positions and starting temperatures. Blobs hotter than 1500Â°K rise
-- and cooler blobs sink. Blobs gain or lose heat depending on whether they are
-- nearer to the bottom or top of the sphere. The blobs have an adhesion force
-- that make them tend to loosely clump together, some slight Brownian motion
-- randomness, buoyancy and drag complete the simulation. The buoyancy is
-- controlled by keeping the mass of the particles the same and varying the
-- radius according to the temperature so that they change density. An anchored
-- central particle with a large radius forms an obstacle that the other
-- particles must move around. We define sphere lights in the same location as
-- each of the blobs, with the same radii and colours.
--
-- The SDF universe is rendered "inside" a single containing sphere. We render
-- this sphere using the special SDF shader. The SDF shader takes the position,
-- radius and emissive color of all of the spheres as array uniforms, and takes
-- the remainder of the material properties from the container sphere.
--
-- The SDF shader raymarches through the contained volume and either returns a
-- fragment color and appropriate fragment depth for the intersected SDF
-- surface, or discards the fragment. As the SDF shader updates the depth
-- buffer with the apparent depth, we are able to merge the SDF universe in
-- with the normal mesh universe rendered with the standard lighting shader.
--
-- Hold down the space key to paint the container with colors representing the
-- computational cost of the raymarcher: red for iterations, blue for the
-- number of spheres considered on each iteration, and green for the product of
-- the two. The lighter the area, the more costly it was to render.
--
-- I hope you have a good GPU.
--
-- Copyright 2024 by Jonathan Hogg and licensed under CC BY-NC-SA 4.0
--
-- Record a video with:
-- flitter day29_sdf.fl --lockstep --runtime=125 --define 'RECORD=1080'

%pragma tempo 60

let SIZE=RECORD or 1440
    NBLOBS=100
    BLOB_TOTAL_MASS=50
    NEUTRAL_DENSITY=1m
    NEUTRAL_TEMPERATURE=1500
    THERMAL_CONDUCTIVITY=0.3m
    LAMP_TEMPERATURE=3000
    THERMAL_GRADIENT=-2000
    THERMAL_CURVE=2
    SMOOTHING=15
    R=100
    BALL_RADIUS=R/2

let t=$(:blob;:clock) or 0
    blob_start_temp=NEUTRAL_TEMPERATURE+100*normal(:temp)[..NBLOBS]
    blob_relative_mass=1+beta(:mass)[..NBLOBS]*100
    blob_mass=BLOB_TOTAL_MASS*blob_relative_mass/sum(blob_relative_mass)
    blob_height=$(:blob;i)[1] for i in ..NBLOBS
    lamp_radiant_temperature=LAMP_TEMPERATURE+(1-((R-blob_height)/(R*2))**THERMAL_CURVE)*THERMAL_GRADIENT
    blob_temperature=$(:temperature) or blob_start_temp
    blob_volume=blob_mass/NEUTRAL_DENSITY*blob_temperature/NEUTRAL_TEMPERATURE
    blob_radius=blob_volume**(1/3)
    blob_area=blob_radius**2
    temp=map(0.9, blob_temperature, NEUTRAL_TEMPERATURE)
    rate_of_temperature_change=THERMAL_CONDUCTIVITY*(lamp_radiant_temperature-temp)/blob_mass*blob_area

func blob_color(i)
    colortemp(blob_temperature[i])*2k

!counter state=:temperature initial=blob_start_temp time=t rate=rate_of_temperature_change minimum=1 maximum=LAMP_TEMPERATURE

!physics dimensions=3 state=:blob resolution=1/30
    !adhesion strength=2 overlap=0.15
    !buoyancy gravity=0;-100;0 density=NEUTRAL_DENSITY
    !random strength=0.5
    !drag strength=2m
    !anchor id=:middle radius=BALL_RADIUS
    for i in ..NBLOBS
        !particle id=i position=(beta(:pos;i)[..3]-0.5)*R mass=blob_mass[i] radius=blob_radius[i]
        !distance from=:middle to=i strength=10 max=R-blob_radius[i]

!window size=SIZE
    !adjust id=:top tonemap=:aces
        !bloom radius=hypot(SIZE)/50
            !canvas3d camera_id=:cam near=0.1 far=R*3 fov=0.2 fov_ref=:vertical samples=4 max_lights=NBLOBS+1 \
                    fog_curve=3 fog_color=colortemp(NEUTRAL_TEMPERATURE) fog_min=R fog_max=R*3
                !transform rotate_y=beat/30
                    !camera id=:cam position=0;0;R*2
                !light color=colortemp(LAMP_TEMPERATURE)*1M position=0;-R*3;0 direction=0;1;0 outer=0.125
                for i in ..NBLOBS
                    !light position=$(:blob;i) radius=blob_radius[i] color=blob_color(i)*blob_area[i]/2
                !group fragment=read('../glsl/sdf_sphere_shader.frag') vertex=read('../glsl/sdf_sphere_shader.vert') show_cost=$:show_cost \
                       NSPHERES=NBLOBS smoothing=SMOOTHING max_iterations=100 normal_delta=R/100 epsilon=R/1000 \
                       sphere_positions=($(:blob;i) for i in ..NBLOBS) \
                       sphere_colors=(blob_color(i) for i in ..NBLOBS) \
                       sphere_radii=blob_radius
                    !material roughness=0.4 color=0.5 metal=true
                        !sphere size=R*1.5

                -- What might Flitter support for SDF look like?
                !sdfsphere size=R*1.5 max_iterations=100 normal_delta=R/100 epsilon=R/1000
                    !material roughness=0.4 color=0.5 metal=true
                        !union smooth=SMOOTHING
                            for i in ..NBLOBS
                                !sphere position=$(:blob;i) size=blob_radius[i] emissive=blob_color(i)

                !group
                    !material color=0;1;0 roughness=0.4 translucency=BALL_RADIUS/2
                        !intersect
                            !sphere size=BALL_RADIUS
                            !box size=BALL_RADIUS*1.5
    !record filename=('day29_sdf.mp4' if RECORD and beat >= 5) codec=:hevc crf=25 hidden=true
        !reference id=:top
    !key name=:space state=:show_cost
